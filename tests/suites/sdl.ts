import { GraphQLSchema, GraphQLField, GraphQLObjectType, GraphQLObjectTypeConfig, GraphQLArgument, GraphQLFieldConfigMap } from 'graphql';
import Container from 'typedi';
export function SDLTests(suiteName: string) {


  let schema: GraphQLSchema;

  describe(`SDL`, () => {

    beforeAll(() => {
      schema = Container.get('schema');
    })

    describe('ConnectionType', () => {
      
      it('Should use the same Object for multiple connections to the same Type', () => {
        const type = schema.getType('TestNestedObjectConnection')!.toConfig() as GraphQLObjectTypeConfig<any, any>

        const object2 = schema.getType('TestObject2')!.toConfig() as GraphQLObjectTypeConfig<any, any>
        const object3 = schema.getType('TestObject3')!.toConfig() as GraphQLObjectTypeConfig<any, any>

        expect(type).toBeTruthy()

        expect((object2.fields as GraphQLFieldConfigMap<any, any>)['connection'].type.toString()).toEqual('TestNestedObjectConnection!')
        expect((object3.fields as GraphQLFieldConfigMap<any, any>)['connection'].type.toString()).toEqual('TestNestedObjectConnection!')
      })

      it('Should use the same Object for multiple connections to the same Type via a given Through', () => {
        const type = schema.getType('TestNestedThroughObjectTestNestedObjectConnection')!.toConfig() as GraphQLObjectTypeConfig<any, any>

        const object2 = schema.getType('TestObject2')!.toConfig() as GraphQLObjectTypeConfig<any, any>
        const object3 = schema.getType('TestObject3')!.toConfig() as GraphQLObjectTypeConfig<any, any>

        expect(type).toBeTruthy()

        expect((object2.fields as GraphQLFieldConfigMap<any, any>)['connectionThrough'].type.toString()).toEqual('TestNestedThroughObjectTestNestedObjectConnection!')
        expect((object3.fields as GraphQLFieldConfigMap<any, any>)['connectionThrough'].type.toString()).toEqual('TestNestedThroughObjectTestNestedObjectConnection!')
      })


    })

    describe('RelayedField', () => {
      it('Should set collection type in SDL', () => {
        const type = schema.getType('TestObject')!.toConfig() as GraphQLObjectTypeConfig<any, any>
        expect(type).toBeTruthy()
        expect((type.fields as GraphQLFieldConfigMap<any, any>)['testRelayedFieldOnly'].type.toString()).toEqual('TestObject2Connection!')
      })
    })

    describe('RelayedConnection', () => {
    })

    describe('RelayedQuery', () => {
      
      describe('Types', () => {
        it('Should have a getAllUsersPaginated with autogenerated connection/edge', () => {
          const query = schema.getQueryType();
          const field: GraphQLField<any, any, any> = query!.getFields()['getAllUsersPaginated'];
  
          expect(field.type.toString()).toEqual('UserConnection!');
          const connection = schema.getType('UserConnection')!.toConfig() as GraphQLObjectTypeConfig<any, any>;
          const edge = schema.getType('UserEdge')!.toConfig() as GraphQLObjectTypeConfig<any, any>;
  
          expect(connection).toBeTruthy();
          expect(edge).toBeTruthy();
        })
      })

      describe('Arguments', () => {

        it('Should keep user-defined arguments', () => {
          const query = schema.getQueryType();
          const field: GraphQLField<any, any, any> = query!.getFields()['getAllUsersPaginated'];
  
          expect(field.args.length).toBeGreaterThan(0)
        })
  
        it('Should add inline relay arguments', () => {
          const query = schema.getQueryType();
          const field: GraphQLField<any, any, {}> = query!.getFields()['getAllUsersPaginated'];
  
          const first = field.args.find((a) => a.name === 'first');
          const last = field.args.find((a) => a.name === 'last');
          const before = field.args.find((a) => a.name === 'before');
          const after = field.args.find((a) => a.name === 'after');
  
          const checkArg = (expectedType: string, arg?: GraphQLArgument) => {
            expect(arg).toBeTruthy();
            expect(arg!.type.toString()).toEqual(expectedType);
          }
  
          checkArg('Int', first)
          checkArg('Int', last)
          checkArg('String', before)
          checkArg('String', after)
        })


        it('Should add InputType relay arguments with default \'pagination\' key', () => {
          const query = schema.getQueryType();
          const expectedType = schema.getType('ConnectionArgs') as GraphQLObjectType;
          const fields: GraphQLField<any, any, {}> = query!.getFields()['testInputTypeArgs'];

          const namedArg = fields.args.find((f) => f.name === "pagination");

          expect(expectedType).toBeTruthy()
          expect(namedArg).toBeTruthy()
          expect(namedArg!.type).toBe(expectedType)
        })

        it('Should add InputType relay arguments with supplied key', () => {
          const query = schema.getQueryType();
          const expectedType = schema.getType('ConnectionArgs') as GraphQLObjectType;
          const fields: GraphQLField<any, any, {}> = query!.getFields()['testNamedInputTypeArgs'];

          const namedArg = fields.args.find((f) => f.name === "testName");

          expect(expectedType).toBeTruthy()
          expect(namedArg).toBeTruthy()
          expect(namedArg!.type).toBe(expectedType)
        })



      })



    })

    describe('PageInfo', () => {
      it('Should have extended PageInfo', async () => {
        const PageInfo = schema.getType('PageInfo') as GraphQLObjectType;
        const testField = PageInfo.getFields()['test']

        expect(testField).toBeTruthy()
        expect(testField.type.toString()).toEqual('String!')
      })
    })
  })
}